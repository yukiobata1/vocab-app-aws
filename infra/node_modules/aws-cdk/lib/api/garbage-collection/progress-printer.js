"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressPrinter = void 0;
const chalk = require("chalk");
const logging_1 = require("../../logging");
class ProgressPrinter {
    constructor(totalObjects, interval) {
        this.totalObjects = totalObjects;
        this.objectsScanned = 0;
        this.taggedObjects = 0;
        this.taggedObjectsSizeMb = 0;
        this.deletedObjects = 0;
        this.deletedObjectsSizeMb = 0;
        this.interval = interval ?? 10000;
        this.isPaused = false;
    }
    reportScannedObjects(amt) {
        this.objectsScanned += amt;
    }
    reportTaggedObjects(objects) {
        this.taggedObjects += objects.length;
        const sizeInBytes = objects.reduce((total, asset) => total + asset.size, 0);
        this.taggedObjectsSizeMb += sizeInBytes / 1048576;
    }
    reportDeletedObjects(objects) {
        this.deletedObjects += objects.length;
        const sizeInBytes = objects.reduce((total, asset) => total + asset.size, 0);
        this.deletedObjectsSizeMb += sizeInBytes / 1048576;
    }
    start() {
        this.setInterval = setInterval(() => {
            if (!this.isPaused) {
                this.print();
            }
        }, this.interval);
    }
    pause() {
        this.isPaused = true;
    }
    resume() {
        this.isPaused = false;
    }
    stop() {
        clearInterval(this.setInterval);
        // print one last time if not paused
        if (!this.isPaused) {
            this.print();
        }
    }
    print() {
        const percentage = ((this.objectsScanned / this.totalObjects) * 100).toFixed(2);
        // print in MiB until we hit at least 1 GiB of data tagged/deleted
        if (Math.max(this.taggedObjectsSizeMb, this.deletedObjectsSizeMb) >= 1000) {
            (0, logging_1.print)(chalk.green(`[${percentage}%] ${this.objectsScanned} files scanned: ${this.taggedObjects} objects (${(this.taggedObjectsSizeMb / 1000).toFixed(2)} GiB) tagged, ${this.deletedObjects} objects (${(this.deletedObjectsSizeMb / 1000).toFixed(2)} GiB) deleted.`));
        }
        else {
            (0, logging_1.print)(chalk.green(`[${percentage}%] ${this.objectsScanned} files scanned: ${this.taggedObjects} objects (${this.taggedObjectsSizeMb.toFixed(2)} MiB) tagged, ${this.deletedObjects} objects (${this.deletedObjectsSizeMb.toFixed(2)} MiB) deleted.`));
        }
    }
}
exports.ProgressPrinter = ProgressPrinter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtcHJpbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb2dyZXNzLXByaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQStCO0FBRS9CLDJDQUFzQztBQUV0QyxNQUFhLGVBQWU7SUFXMUIsWUFBWSxZQUFvQixFQUFFLFFBQWlCO1FBQ2pELElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLG9CQUFvQixHQUFHLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSSxLQUFNLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVNLG9CQUFvQixDQUFDLEdBQVc7UUFDckMsSUFBSSxDQUFDLGNBQWMsSUFBSSxHQUFHLENBQUM7SUFDN0IsQ0FBQztJQUVNLG1CQUFtQixDQUFDLE9BQWtCO1FBQzNDLElBQUksQ0FBQyxhQUFhLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUNyQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLG1CQUFtQixJQUFJLFdBQVcsR0FBRyxPQUFTLENBQUM7SUFDdEQsQ0FBQztJQUVNLG9CQUFvQixDQUFDLE9BQWtCO1FBQzVDLElBQUksQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLG9CQUFvQixJQUFJLFdBQVcsR0FBRyxPQUFTLENBQUM7SUFDdkQsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDbkIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2YsQ0FBQztRQUNILENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEIsQ0FBQztJQUVNLEtBQUs7UUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTTtRQUNYLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFTSxJQUFJO1FBQ1QsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoQyxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNuQixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQztJQUVPLEtBQUs7UUFDWCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLGtFQUFrRTtRQUNsRSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQzFFLElBQUEsZUFBSyxFQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLE1BQU0sSUFBSSxDQUFDLGNBQWMsbUJBQW1CLElBQUksQ0FBQyxhQUFhLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLGNBQWMsYUFBYSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUMxUSxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUEsZUFBSyxFQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLE1BQU0sSUFBSSxDQUFDLGNBQWMsbUJBQW1CLElBQUksQ0FBQyxhQUFhLGFBQWEsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsaUJBQWlCLElBQUksQ0FBQyxjQUFjLGFBQWEsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3hQLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUF2RUQsMENBdUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhbGsgZnJvbSAnY2hhbGsnO1xuaW1wb3J0IHsgUzNBc3NldCB9IGZyb20gJy4vZ2FyYmFnZS1jb2xsZWN0b3InO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tICcuLi8uLi9sb2dnaW5nJztcblxuZXhwb3J0IGNsYXNzIFByb2dyZXNzUHJpbnRlciB7XG4gIHByaXZhdGUgdG90YWxPYmplY3RzOiBudW1iZXI7XG4gIHByaXZhdGUgb2JqZWN0c1NjYW5uZWQ6IG51bWJlcjtcbiAgcHJpdmF0ZSB0YWdnZWRPYmplY3RzOiBudW1iZXI7XG4gIHByaXZhdGUgdGFnZ2VkT2JqZWN0c1NpemVNYjogbnVtYmVyO1xuICBwcml2YXRlIGRlbGV0ZWRPYmplY3RzOiBudW1iZXI7XG4gIHByaXZhdGUgZGVsZXRlZE9iamVjdHNTaXplTWI6IG51bWJlcjtcbiAgcHJpdmF0ZSBpbnRlcnZhbDogbnVtYmVyO1xuICBwcml2YXRlIHNldEludGVydmFsPzogTm9kZUpTLlRpbWVyO1xuICBwcml2YXRlIGlzUGF1c2VkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHRvdGFsT2JqZWN0czogbnVtYmVyLCBpbnRlcnZhbD86IG51bWJlcikge1xuICAgIHRoaXMudG90YWxPYmplY3RzID0gdG90YWxPYmplY3RzO1xuICAgIHRoaXMub2JqZWN0c1NjYW5uZWQgPSAwO1xuICAgIHRoaXMudGFnZ2VkT2JqZWN0cyA9IDA7XG4gICAgdGhpcy50YWdnZWRPYmplY3RzU2l6ZU1iID0gMDtcbiAgICB0aGlzLmRlbGV0ZWRPYmplY3RzID0gMDtcbiAgICB0aGlzLmRlbGV0ZWRPYmplY3RzU2l6ZU1iID0gMDtcbiAgICB0aGlzLmludGVydmFsID0gaW50ZXJ2YWwgPz8gMTBfMDAwO1xuICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyByZXBvcnRTY2FubmVkT2JqZWN0cyhhbXQ6IG51bWJlcikge1xuICAgIHRoaXMub2JqZWN0c1NjYW5uZWQgKz0gYW10O1xuICB9XG5cbiAgcHVibGljIHJlcG9ydFRhZ2dlZE9iamVjdHMob2JqZWN0czogUzNBc3NldFtdKSB7XG4gICAgdGhpcy50YWdnZWRPYmplY3RzICs9IG9iamVjdHMubGVuZ3RoO1xuICAgIGNvbnN0IHNpemVJbkJ5dGVzID0gb2JqZWN0cy5yZWR1Y2UoKHRvdGFsLCBhc3NldCkgPT4gdG90YWwgKyBhc3NldC5zaXplLCAwKTtcbiAgICB0aGlzLnRhZ2dlZE9iamVjdHNTaXplTWIgKz0gc2l6ZUluQnl0ZXMgLyAxXzA0OF81NzY7XG4gIH1cblxuICBwdWJsaWMgcmVwb3J0RGVsZXRlZE9iamVjdHMob2JqZWN0czogUzNBc3NldFtdKSB7XG4gICAgdGhpcy5kZWxldGVkT2JqZWN0cyArPSBvYmplY3RzLmxlbmd0aDtcbiAgICBjb25zdCBzaXplSW5CeXRlcyA9IG9iamVjdHMucmVkdWNlKCh0b3RhbCwgYXNzZXQpID0+IHRvdGFsICsgYXNzZXQuc2l6ZSwgMCk7XG4gICAgdGhpcy5kZWxldGVkT2JqZWN0c1NpemVNYiArPSBzaXplSW5CeXRlcyAvIDFfMDQ4XzU3NjtcbiAgfVxuXG4gIHB1YmxpYyBzdGFydCgpIHtcbiAgICB0aGlzLnNldEludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLmlzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMucHJpbnQoKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLmludGVydmFsKTtcbiAgfVxuXG4gIHB1YmxpYyBwYXVzZSgpIHtcbiAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyByZXN1bWUoKSB7XG4gICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNldEludGVydmFsKTtcbiAgICAvLyBwcmludCBvbmUgbGFzdCB0aW1lIGlmIG5vdCBwYXVzZWRcbiAgICBpZiAoIXRoaXMuaXNQYXVzZWQpIHtcbiAgICAgIHRoaXMucHJpbnQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHByaW50KCkge1xuICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSAoKHRoaXMub2JqZWN0c1NjYW5uZWQgLyB0aGlzLnRvdGFsT2JqZWN0cykgKiAxMDApLnRvRml4ZWQoMik7XG4gICAgLy8gcHJpbnQgaW4gTWlCIHVudGlsIHdlIGhpdCBhdCBsZWFzdCAxIEdpQiBvZiBkYXRhIHRhZ2dlZC9kZWxldGVkXG4gICAgaWYgKE1hdGgubWF4KHRoaXMudGFnZ2VkT2JqZWN0c1NpemVNYiwgdGhpcy5kZWxldGVkT2JqZWN0c1NpemVNYikgPj0gMTAwMCkge1xuICAgICAgcHJpbnQoY2hhbGsuZ3JlZW4oYFske3BlcmNlbnRhZ2V9JV0gJHt0aGlzLm9iamVjdHNTY2FubmVkfSBmaWxlcyBzY2FubmVkOiAke3RoaXMudGFnZ2VkT2JqZWN0c30gb2JqZWN0cyAoJHsodGhpcy50YWdnZWRPYmplY3RzU2l6ZU1iIC8gMTAwMCkudG9GaXhlZCgyKX0gR2lCKSB0YWdnZWQsICR7dGhpcy5kZWxldGVkT2JqZWN0c30gb2JqZWN0cyAoJHsodGhpcy5kZWxldGVkT2JqZWN0c1NpemVNYiAvIDEwMDApLnRvRml4ZWQoMil9IEdpQikgZGVsZXRlZC5gKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW50KGNoYWxrLmdyZWVuKGBbJHtwZXJjZW50YWdlfSVdICR7dGhpcy5vYmplY3RzU2Nhbm5lZH0gZmlsZXMgc2Nhbm5lZDogJHt0aGlzLnRhZ2dlZE9iamVjdHN9IG9iamVjdHMgKCR7dGhpcy50YWdnZWRPYmplY3RzU2l6ZU1iLnRvRml4ZWQoMil9IE1pQikgdGFnZ2VkLCAke3RoaXMuZGVsZXRlZE9iamVjdHN9IG9iamVjdHMgKCR7dGhpcy5kZWxldGVkT2JqZWN0c1NpemVNYi50b0ZpeGVkKDIpfSBNaUIpIGRlbGV0ZWQuYCkpO1xuICAgIH1cbiAgfVxufSJdfQ==