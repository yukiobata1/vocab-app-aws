"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFormationDeployments = exports.Deployments = void 0;
const crypto_1 = require("crypto");
const cdk_assets = require("cdk-assets");
const cdk_assets_1 = require("cdk-assets");
const chalk = require("chalk");
const logging_1 = require("../logging");
const credentials_1 = require("./aws-auth/credentials");
const deploy_stack_1 = require("./deploy-stack");
const environment_resources_1 = require("./environment-resources");
const nested_stack_helpers_1 = require("./nested-stack-helpers");
const checks_1 = require("./util/checks");
const cloudformation_1 = require("./util/cloudformation");
const stack_activity_monitor_1 = require("./util/cloudformation/stack-activity-monitor");
const stack_event_poller_1 = require("./util/cloudformation/stack-event-poller");
const stack_status_1 = require("./util/cloudformation/stack-status");
const placeholders_1 = require("./util/placeholders");
const template_body_parameter_1 = require("./util/template-body-parameter");
const asset_manifest_builder_1 = require("../util/asset-manifest-builder");
const asset_publishing_1 = require("../util/asset-publishing");
const BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK = 23;
/**
 * Scope for a single set of deployments from a set of Cloud Assembly Artifacts
 *
 * Manages lookup of SDKs, Bootstrap stacks, etc.
 */
class Deployments {
    constructor(props) {
        this.props = props;
        this.sdkCache = new Map();
        this.publisherCache = new Map();
        this.sdkProvider = props.sdkProvider;
        this.environmentResources = new environment_resources_1.EnvironmentResourcesRegistry(props.toolkitStackName);
    }
    /**
     * Resolves the environment for a stack.
     */
    async resolveEnvironment(stack) {
        return this.sdkProvider.resolveEnvironment(stack.environment);
    }
    async readCurrentTemplateWithNestedStacks(rootStackArtifact, retrieveProcessedTemplate = false) {
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(rootStackArtifact)).stackSdk;
        return (0, nested_stack_helpers_1.loadCurrentTemplateWithNestedStacks)(rootStackArtifact, sdk, retrieveProcessedTemplate);
    }
    async readCurrentTemplate(stackArtifact) {
        (0, logging_1.debug)(`Reading existing template for stack ${stackArtifact.displayName}.`);
        const sdk = (await this.prepareSdkWithLookupOrDeployRole(stackArtifact)).stackSdk;
        return (0, nested_stack_helpers_1.loadCurrentTemplate)(stackArtifact, sdk);
    }
    async resourceIdentifierSummaries(stackArtifact) {
        (0, logging_1.debug)(`Retrieving template summary for stack ${stackArtifact.displayName}.`);
        // Currently, needs to use `deploy-role` since it may need to read templates in the staging
        // bucket which have been encrypted with a KMS key (and lookup-role may not read encrypted things)
        const { stackSdk, resolvedEnvironment, envResources } = await this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForReading);
        const cfn = stackSdk.cloudFormation();
        await (0, cloudformation_1.uploadStackTemplateAssets)(stackArtifact, this);
        // Upload the template, if necessary, before passing it to CFN
        const builder = new asset_manifest_builder_1.AssetManifestBuilder();
        const cfnParam = await (0, template_body_parameter_1.makeBodyParameter)(stackArtifact, resolvedEnvironment, builder, envResources, stackSdk);
        // If the `makeBodyParameter` before this added assets, make sure to publish them before
        // calling the API.
        const addedAssets = builder.toManifest(stackArtifact.assembly.directory);
        for (const entry of addedAssets.entries) {
            await this.buildSingleAsset('no-version-validation', addedAssets, entry, {
                stack: stackArtifact,
            });
            await this.publishSingleAsset(addedAssets, entry, {
                stack: stackArtifact,
            });
        }
        const response = await cfn.getTemplateSummary(cfnParam).promise();
        if (!response.ResourceIdentifierSummaries) {
            (0, logging_1.debug)('GetTemplateSummary API call did not return "ResourceIdentifierSummaries"');
        }
        return response.ResourceIdentifierSummaries ?? [];
    }
    async deployStack(options) {
        let deploymentMethod = options.deploymentMethod;
        if (options.changeSetName || options.execute !== undefined) {
            if (deploymentMethod) {
                throw new Error('You cannot supply both \'deploymentMethod\' and \'changeSetName/execute\'. Supply one or the other.');
            }
            deploymentMethod = {
                method: 'change-set',
                changeSetName: options.changeSetName,
                execute: options.execute,
            };
        }
        const { stackSdk, resolvedEnvironment, cloudFormationRoleArn, envResources, } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        // Do a verification of the bootstrap stack version
        await this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, options.stack.bootstrapStackVersionSsmParameter, envResources);
        return (0, deploy_stack_1.deployStack)({
            stack: options.stack,
            resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            quiet: options.quiet,
            sdk: stackSdk,
            sdkProvider: this.sdkProvider,
            roleArn: cloudFormationRoleArn,
            reuseAssets: options.reuseAssets,
            envResources,
            tags: options.tags,
            deploymentMethod,
            force: options.force,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            progress: options.progress,
            ci: options.ci,
            rollback: options.rollback,
            hotswap: options.hotswap,
            hotswapPropertyOverrides: options.hotswapPropertyOverrides,
            extraUserAgent: options.extraUserAgent,
            resourcesToImport: options.resourcesToImport,
            overrideTemplate: options.overrideTemplate,
            assetParallelism: options.assetParallelism,
        });
    }
    async rollbackStack(options) {
        let resourcesToSkip = options.orphanLogicalIds ?? [];
        if (options.force && resourcesToSkip.length > 0) {
            throw new Error('Cannot combine --force with --orphan');
        }
        const { stackSdk, resolvedEnvironment: _, cloudFormationRoleArn, envResources, } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        if (options.validateBootstrapStackVersion ?? true) {
            // Do a verification of the bootstrap stack version
            await this.validateBootstrapStackVersion(options.stack.stackName, BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK, options.stack.bootstrapStackVersionSsmParameter, envResources);
        }
        const cfn = stackSdk.cloudFormation();
        const deployName = options.stack.stackName;
        // We loop in case of `--force` and the stack ends up in `CONTINUE_UPDATE_ROLLBACK`.
        let maxLoops = 10;
        while (maxLoops--) {
            let cloudFormationStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
            switch (cloudFormationStack.stackStatus.rollbackChoice) {
                case stack_status_1.RollbackChoice.NONE:
                    (0, logging_1.warning)(`Stack ${deployName} does not need a rollback: ${cloudFormationStack.stackStatus}`);
                    return { notInRollbackableState: true };
                case stack_status_1.RollbackChoice.START_ROLLBACK:
                    (0, logging_1.debug)(`Initiating rollback of stack ${deployName}`);
                    await cfn.rollbackStack({
                        StackName: deployName,
                        RoleARN: cloudFormationRoleArn,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        // Enabling this is just the better overall default, the only reason it isn't the upstream default is backwards compatibility
                        RetainExceptOnCreate: true,
                    }).promise();
                    break;
                case stack_status_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK:
                    if (options.force) {
                        // Find the failed resources from the deployment and automatically skip them
                        // (Using deployment log because we definitely have `DescribeStackEvents` permissions, and we might not have
                        // `DescribeStackResources` permissions).
                        const poller = new stack_event_poller_1.StackEventPoller(cfn, {
                            stackName: deployName,
                            stackStatuses: ['ROLLBACK_IN_PROGRESS', 'UPDATE_ROLLBACK_IN_PROGRESS'],
                        });
                        await poller.poll();
                        resourcesToSkip = poller.resourceErrors
                            .filter(r => !r.isStackEvent && r.parentStackLogicalIds.length === 0)
                            .map(r => r.event.LogicalResourceId ?? '');
                    }
                    const skipDescription = resourcesToSkip.length > 0
                        ? ` (orphaning: ${resourcesToSkip.join(', ')})`
                        : '';
                    (0, logging_1.warning)(`Continuing rollback of stack ${deployName}${skipDescription}`);
                    await cfn.continueUpdateRollback({
                        StackName: deployName,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        RoleARN: cloudFormationRoleArn,
                        ResourcesToSkip: resourcesToSkip,
                    }).promise();
                    break;
                case stack_status_1.RollbackChoice.ROLLBACK_FAILED:
                    (0, logging_1.warning)(`Stack ${deployName} failed creation and rollback. This state cannot be rolled back. You can recreate this stack by running 'cdk deploy'.`);
                    return { notInRollbackableState: true };
                default:
                    throw new Error(`Unexpected rollback choice: ${cloudFormationStack.stackStatus.rollbackChoice}`);
            }
            const monitor = options.quiet ? undefined : stack_activity_monitor_1.StackActivityMonitor.withDefaultPrinter(cfn, deployName, options.stack, {
                ci: options.ci,
            }).start();
            let stackErrorMessage = undefined;
            let finalStackState = cloudFormationStack;
            try {
                const successStack = await (0, cloudformation_1.stabilizeStack)(cfn, deployName);
                // This shouldn't really happen, but catch it anyway. You never know.
                if (!successStack) {
                    throw new Error('Stack deploy failed (the stack disappeared while we were rolling it back)');
                }
                finalStackState = successStack;
                const errors = monitor?.errors?.join(', ');
                if (errors) {
                    stackErrorMessage = errors;
                }
            }
            catch (e) {
                stackErrorMessage = suffixWithErrors(e.message, monitor?.errors);
            }
            finally {
                await monitor?.stop();
            }
            if (finalStackState.stackStatus.isRollbackSuccess || !stackErrorMessage) {
                return { success: true };
            }
            // Either we need to ignore some resources to continue the rollback, or something went wrong
            if (finalStackState.stackStatus.rollbackChoice === stack_status_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK && options.force) {
                // Do another loop-de-loop
                continue;
            }
            throw new Error(`${stackErrorMessage} (fix problem and retry, or orphan these resources using --orphan or --force)`);
            ;
        }
        throw new Error('Rollback did not finish after a large number of iterations; stopping because it looks like we\'re not making progress anymore. You can retry if rollback was progressing as expected.');
    }
    async destroyStack(options) {
        const { stackSdk, cloudFormationRoleArn: roleArn } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        return (0, deploy_stack_1.destroyStack)({
            sdk: stackSdk,
            roleArn,
            stack: options.stack,
            deployName: options.deployName,
            quiet: options.quiet,
            ci: options.ci,
        });
    }
    async stackExists(options) {
        let stackSdk;
        if (options.tryLookupRole) {
            stackSdk = (await this.prepareSdkWithLookupOrDeployRole(options.stack)).stackSdk;
        }
        else {
            stackSdk = (await this.prepareSdkFor(options.stack, undefined, credentials_1.Mode.ForReading)).stackSdk;
        }
        const stack = await cloudformation_1.CloudFormationStack.lookup(stackSdk.cloudFormation(), options.deployName ?? options.stack.stackName);
        return stack.exists;
    }
    async prepareSdkWithDeployRole(stackArtifact) {
        return this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForWriting);
    }
    async prepareSdkWithLookupOrDeployRole(stackArtifact) {
        // try to assume the lookup role
        try {
            const result = await this.prepareSdkWithLookupRoleFor(stackArtifact);
            if (result.didAssumeRole) {
                return {
                    resolvedEnvironment: result.resolvedEnvironment,
                    stackSdk: result.sdk,
                    envResources: result.envResources,
                };
            }
        }
        catch { }
        // fall back to the deploy role
        return this.prepareSdkFor(stackArtifact, undefined, credentials_1.Mode.ForReading);
    }
    /**
     * Get the environment necessary for touching the given stack
     *
     * Returns the following:
     *
     * - The resolved environment for the stack (no more 'unknown-account/unknown-region')
     * - SDK loaded with the right credentials for calling `CreateChangeSet`.
     * - The Execution Role that should be passed to CloudFormation.
     */
    async prepareSdkFor(stack, roleArn, mode) {
        if (!stack.environment) {
            throw new Error(`The stack ${stack.displayName} does not have an environment`);
        }
        const resolvedEnvironment = await this.resolveEnvironment(stack);
        // Substitute any placeholders with information about the current environment
        const arns = await (0, placeholders_1.replaceEnvPlaceholders)({
            assumeRoleArn: stack.assumeRoleArn,
            // Use the override if given, otherwise use the field from the stack
            cloudFormationRoleArn: roleArn ?? stack.cloudFormationExecutionRoleArn,
        }, resolvedEnvironment, this.sdkProvider);
        const stackSdk = await this.cachedSdkForEnvironment(resolvedEnvironment, mode, {
            assumeRoleArn: arns.assumeRoleArn,
            assumeRoleExternalId: stack.assumeRoleExternalId,
            assumeRoleAdditionalOptions: stack.assumeRoleAdditionalOptions,
        });
        return {
            stackSdk: stackSdk.sdk,
            resolvedEnvironment,
            cloudFormationRoleArn: arns.cloudFormationRoleArn,
            envResources: this.environmentResources.for(resolvedEnvironment, stackSdk.sdk),
        };
    }
    /**
     * Try to use the bootstrap lookupRole. There are two scenarios that are handled here
     *  1. The lookup role may not exist (it was added in bootstrap stack version 7)
     *  2. The lookup role may not have the correct permissions (ReadOnlyAccess was added in
     *      bootstrap stack version 8)
     *
     * In the case of 1 (lookup role doesn't exist) `forEnvironment` will either:
     *   1. Return the default credentials if the default credentials are for the stack account
     *   2. Throw an error if the default credentials are not for the stack account.
     *
     * If we successfully assume the lookup role we then proceed to 2 and check whether the bootstrap
     * stack version is valid. If it is not we throw an error which should be handled in the calling
     * function (and fallback to use a different role, etc)
     *
     * If we do not successfully assume the lookup role, but do get back the default credentials
     * then return those and note that we are returning the default credentials. The calling
     * function can then decide to use them or fallback to another role.
     */
    async prepareSdkWithLookupRoleFor(stack) {
        const resolvedEnvironment = await this.sdkProvider.resolveEnvironment(stack.environment);
        // Substitute any placeholders with information about the current environment
        const arns = await (0, placeholders_1.replaceEnvPlaceholders)({
            lookupRoleArn: stack.lookupRole?.arn,
        }, resolvedEnvironment, this.sdkProvider);
        // try to assume the lookup role
        const warningMessage = `Could not assume ${arns.lookupRoleArn}, proceeding anyway.`;
        try {
            // Trying to assume lookup role and cache the sdk for the environment
            const stackSdk = await this.cachedSdkForEnvironment(resolvedEnvironment, credentials_1.Mode.ForReading, {
                assumeRoleArn: arns.lookupRoleArn,
                assumeRoleExternalId: stack.lookupRole?.assumeRoleExternalId,
                assumeRoleAdditionalOptions: stack.lookupRole?.assumeRoleAdditionalOptions,
            });
            const envResources = this.environmentResources.for(resolvedEnvironment, stackSdk.sdk);
            // if we succeed in assuming the lookup role, make sure we have the correct bootstrap stack version
            if (stackSdk.didAssumeRole && stack.lookupRole?.bootstrapStackVersionSsmParameter && stack.lookupRole.requiresBootstrapStackVersion) {
                const version = await envResources.versionFromSsmParameter(stack.lookupRole.bootstrapStackVersionSsmParameter);
                if (version < stack.lookupRole.requiresBootstrapStackVersion) {
                    throw new Error(`Bootstrap stack version '${stack.lookupRole.requiresBootstrapStackVersion}' is required, found version '${version}'. To get rid of this error, please upgrade to bootstrap version >= ${stack.lookupRole.requiresBootstrapStackVersion}`);
                }
            }
            else if (!stackSdk.didAssumeRole) {
                const lookUpRoleExists = stack.lookupRole ? true : false;
                (0, logging_1.warning)(`Lookup role ${lookUpRoleExists ? 'exists but' : 'does not exist, hence'} was not assumed. Proceeding with default credentials.`);
            }
            return { ...stackSdk, resolvedEnvironment, envResources };
        }
        catch (e) {
            (0, logging_1.debug)(e);
            // only print out the warnings if the lookupRole exists
            if (stack.lookupRole) {
                (0, logging_1.warning)(warningMessage);
            }
            // This error should be shown even if debug mode is off
            if (e instanceof Error && e.message.includes('Bootstrap stack version')) {
                (0, logging_1.error)(e.message);
            }
            throw (e);
        }
    }
    async prepareAndValidateAssets(asset, options) {
        const { envResources } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        await this.validateBootstrapStackVersion(options.stack.stackName, asset.requiresBootstrapStackVersion, asset.bootstrapStackVersionSsmParameter, envResources);
        const manifest = cdk_assets_1.AssetManifest.fromFile(asset.file);
        return { manifest, stackEnv: envResources.environment };
    }
    /**
     * Build all assets in a manifest
     *
     * @deprecated Use `buildSingleAsset` instead
     */
    async buildAssets(asset, options) {
        const { manifest, stackEnv } = await this.prepareAndValidateAssets(asset, options);
        await (0, asset_publishing_1.buildAssets)(manifest, this.sdkProvider, stackEnv, options.buildOptions);
    }
    /**
     * Publish all assets in a manifest
     *
     * @deprecated Use `publishSingleAsset` instead
     */
    async publishAssets(asset, options) {
        const { manifest, stackEnv } = await this.prepareAndValidateAssets(asset, options);
        await (0, asset_publishing_1.publishAssets)(manifest, this.sdkProvider, stackEnv, {
            ...options.publishOptions,
            allowCrossAccount: await this.allowCrossAccountAssetPublishingForEnv(options.stack),
        });
    }
    /**
     * Build a single asset from an asset manifest
     *
     * If an assert manifest artifact is given, the bootstrap stack version
     * will be validated according to the constraints in that manifest artifact.
     * If that is not necessary, `'no-version-validation'` can be passed.
     */
    // eslint-disable-next-line max-len
    async buildSingleAsset(assetArtifact, assetManifest, asset, options) {
        const { resolvedEnvironment, envResources } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        if (assetArtifact !== 'no-version-validation') {
            await this.validateBootstrapStackVersion(options.stack.stackName, assetArtifact.requiresBootstrapStackVersion, assetArtifact.bootstrapStackVersionSsmParameter, envResources);
        }
        const publisher = this.cachedPublisher(assetManifest, resolvedEnvironment, options.stackName);
        await publisher.buildEntry(asset);
        if (publisher.hasFailures) {
            throw new Error(`Failed to build asset ${asset.id}`);
        }
    }
    /**
     * Publish a single asset from an asset manifest
     */
    // eslint-disable-next-line max-len
    async publishSingleAsset(assetManifest, asset, options) {
        const { resolvedEnvironment: stackEnv } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        // No need to validate anymore, we already did that during build
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        // eslint-disable-next-line no-console
        await publisher.publishEntry(asset, { allowCrossAccount: await this.allowCrossAccountAssetPublishingForEnv(options.stack) });
        if (publisher.hasFailures) {
            throw new Error(`Failed to publish asset ${asset.id}`);
        }
    }
    async allowCrossAccountAssetPublishingForEnv(stack) {
        if (this._allowCrossAccountAssetPublishing === undefined) {
            const { stackSdk: sdk } = await this.prepareSdkFor(stack, undefined, credentials_1.Mode.ForReading);
            this._allowCrossAccountAssetPublishing = await (0, checks_1.determineAllowCrossAccountAssetPublishing)(sdk, this.props.toolkitStackName);
        }
        return this._allowCrossAccountAssetPublishing;
    }
    /**
     * Return whether a single asset has been published already
     */
    async isSingleAssetPublished(assetManifest, asset, options) {
        const { resolvedEnvironment: stackEnv } = await this.prepareSdkFor(options.stack, options.roleArn, credentials_1.Mode.ForWriting);
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        return publisher.isEntryPublished(asset);
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     *
     * Call into envResources.validateVersion, but prepend the stack name in case of failure.
     */
    async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, envResources) {
        try {
            await envResources.validateVersion(requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter);
        }
        catch (e) {
            throw new Error(`${stackName}: ${e.message}`);
        }
    }
    async cachedSdkForEnvironment(environment, mode, options) {
        const cacheKeyElements = [
            environment.account,
            environment.region,
            `${mode}`,
            options?.assumeRoleArn ?? '',
            options?.assumeRoleExternalId ?? '',
        ];
        if (options?.assumeRoleAdditionalOptions) {
            cacheKeyElements.push(JSON.stringify(options.assumeRoleAdditionalOptions));
        }
        const cacheKey = cacheKeyElements.join(':');
        const existing = this.sdkCache.get(cacheKey);
        if (existing) {
            return existing;
        }
        const ret = await this.sdkProvider.forEnvironment(environment, mode, options);
        this.sdkCache.set(cacheKey, ret);
        return ret;
    }
    cachedPublisher(assetManifest, env, stackName) {
        const existing = this.publisherCache.get(assetManifest);
        if (existing) {
            return existing;
        }
        const prefix = stackName ? `${chalk.bold(stackName)}: ` : '';
        const publisher = new cdk_assets.AssetPublishing(assetManifest, {
            aws: new asset_publishing_1.PublishingAws(this.sdkProvider, env),
            progressListener: new ParallelSafeAssetProgress(prefix, this.props.quiet ?? false),
        });
        this.publisherCache.set(assetManifest, publisher);
        return publisher;
    }
}
exports.Deployments = Deployments;
/**
 * Asset progress that doesn't do anything with percentages (currently)
 */
class ParallelSafeAssetProgress {
    constructor(prefix, quiet) {
        this.prefix = prefix;
        this.quiet = quiet;
    }
    onPublishEvent(type, event) {
        const handler = this.quiet && type !== 'fail' ? logging_1.debug : asset_publishing_1.EVENT_TO_LOGGER[type];
        handler(`${this.prefix}${type}: ${event.message}`);
    }
}
/**
 * @deprecated Use 'Deployments' instead
 */
class CloudFormationDeployments extends Deployments {
}
exports.CloudFormationDeployments = CloudFormationDeployments;
function suffixWithErrors(msg, errors) {
    return errors && errors.length > 0
        ? `${msg}: ${errors.join(', ')}`
        : msg;
}
//# sourceMappingURL=data:application/json;base64,