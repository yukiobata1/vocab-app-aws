name: Deploy Vocab App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Frontend Build and Test
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --run

      - name: Run frontend linter
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 1

  # Infrastructure Build and Test
  infrastructure:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Install CDK dependencies
        working-directory: ./infra
        run: npm ci

      - name: Run CDK synth
        working-directory: ./infra
        run: npx cdk synth

      - name: Upload CDK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cdk-artifacts
          path: infra/cdk.out/
          retention-days: 1

  # Deploy to Development (only on main branch)
  deploy-dev:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [frontend, infrastructure]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: ./infra
        run: npm ci

      - name: Deploy to Development
        working-directory: ./infra
        run: |
          npx cdk bootstrap --require-approval never
          npx cdk deploy VocabAppDevStack --require-approval never

      - name: Test Room API endpoints
        working-directory: ./infra
        run: python test_room_api.py

      - name: Comment deployment URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: outputs } = await github.rest.cloudformation.describeStacks({
              StackName: 'VocabAppDevStack'
            });
            const frontendUrl = outputs.Stacks[0].Outputs.find(o => o.OutputKey === 'FrontendURL')?.OutputValue;
            
            if (frontendUrl) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ **Deployment successful!**\n\nðŸ“± **Frontend URL:** ${frontendUrl}\n\nðŸ”— **API Gateway:** Available in AWS Console`
              });
            }

  # Deploy to Production (manual trigger)
  deploy-prod:
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    needs: [frontend, infrastructure]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infra/package-lock.json

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        working-directory: ./infra
        run: npm ci

      - name: Deploy to Production
        working-directory: ./infra
        run: |
          npx cdk bootstrap --require-approval never
          npx cdk deploy VocabAppProdStack --require-approval never

  # Cleanup artifacts
  cleanup:
    if: always()
    needs: [deploy-dev]
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'frontend-build' || artifact.name === 'cdk-artifacts') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }